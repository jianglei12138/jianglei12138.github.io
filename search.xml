<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rxjava2 使用以及源码阅读</title>
      <link href="/2018/06/15/Rxjava2%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2018/06/15/Rxjava2%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>作为一个没怎么使用过<code>Rxjava2</code>的人来说，要理解<code>Rxjava2</code>的很多东西确实有一些困难，因此我想从<code>Rxjava2</code>的源码来入手，研究一下<code>Rxjava</code>的实现原理，以及体验一下响应式编程的乐趣。<br> <a id="more"></a></p><h1 id="Rxjava2-使用以及源码阅读"><a href="#Rxjava2-使用以及源码阅读" class="headerlink" title="Rxjava2 使用以及源码阅读"></a>Rxjava2 使用以及源码阅读</h1><p>作为一个没怎么使用过<code>Rxjava2</code>的人来说，要理解<code>Rxjava2</code>的很多东西确实有一些困难，因此我想从<code>Rxjava2</code>的源码来入手，研究一下<code>Rxjava</code>的实现原理，以及体验一下响应式编程的乐趣。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>如果你去看关于<code>Rxjava</code>的博客，一般都会介绍到<code>Rxjava</code>使用了一种叫做<code>观察者</code>的设计模式。这个观察者模式是什么呢？按照我们大学老师的原话来说,  观察者模式是使用频率最高的设计模式之一，它用于建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应。在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。具体可参考 <a href="https://blog.csdn.net/lovelion/article/details/7720382" target="_blank" rel="noopener">观察者模式</a>, 顺便说一句，刘伟老师的博客质量还是很好的。</p><p>具体关于观察者模式的定义，可参考GOF的《设计模式》一书。</p><blockquote><p>观察者模式(Observer Pattern)：定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式的别名包括发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</p></blockquote><p>如图是观察者模式的UML类图，其中包括主要的几个角色</p><p><img src="/.io//1341501815_4830.jpg" alt="1341501815_4830"></p><ul><li>Subject/ConcrateSubject, 目标又被称为主题，是指被观察的对象（被观察者），目标中定义了一系列的观察者，一个观察者subject可以接受任何数量的观察者，当Subject发生改变，将通过notify方法通知到观察者。</li><li>Observer/ConcreteObserver，观察者, 根据被观察的改变作出具体的反应。</li></ul><p>我们可以想象一种场景，当你在玩节奏大师这个游戏的时候，抱歉我没有玩过，游戏就是Subject，你就是Observer，当游戏中出现音符后，你就需要点击对应的音符。游戏作为Subject，它产生了一些列的音符，当它出现时，会通知到你，进而你可以对Subject的改变做一些其他的事情。</p><h3 id="Rxjava源码分析"><a href="#Rxjava源码分析" class="headerlink" title="Rxjava源码分析"></a>Rxjava源码分析</h3><h4 id="背压"><a href="#背压" class="headerlink" title="背压"></a>背压</h4><p>观察者模式说完，在正式的介绍Rxjava之前，我们需要了解一个概念叫做<code>背压(BackPressure)</code>，想象你还在玩节奏大师，你需要根据游戏来做一些反馈，这有点类似生产者消费者模型，游戏作为生产者，一直在生产各种音符(在Rxjava被称为发射emit)，你作为消费者，你对音符需要点击，长按等操作。但是，如果音符出现的特别快，我们就会有一种处理不过来的感觉。这就是背压。</p><blockquote><p>生产者（被观察者）的生产速度大于消费者（观察者）消费速度，就会产生背压</p></blockquote><p>了解背压，我们就可以分析<code>Rxjava</code>的实现了，源码是参考<code>Rxjava2</code>的最新代码,，我没有用过<code>Rxjava 1.x</code>版本。首先我们知道<code>Rxjava</code>使用了观察者模式。那么我们首先来分析一下<code>Rxjava</code>中的观察者模式中的目标(Subject)，即被观察者， Rxjava中有很多已经实现了的被观察者，包括 <code>Observable</code> ，<code>Flowable</code>，<code>Single</code>，<code>Completable</code>，<code>Maybe。</code>具体的阐述与区别如下表。</p><table><thead><tr><th>观察者</th><th>应用场景</th></tr></thead><tbody><tr><td><code>Observable</code></td><td>不支持背压，适用于数据量不是很大的生产者消费者模型，一般官方推荐低于1k，数据量过大可能会导致资源暂用，表现出来的形式就是系统卡顿或者OOM</td></tr><tr><td><code>Flowable</code></td><td>与<code>Observable</code>的不同之处在于支持背压，通过设置缓存等方式控制生产者的生产数量。</td></tr><tr><td><code>Single</code></td><td>适用于单一事件流，即生产者只会生产一个数据(onNext)，接着就是完成(onComplete)或者出错(onError)</td></tr><tr><td><code>Completable</code></td><td>如果消费者不关心生产者任何的数据，只需要关注完成或者出错</td></tr><tr><td><code>Maybe</code></td><td>类似<code>Single</code>于<code>Completable</code>混合体，可能存在事件也可能不存在</td></tr></tbody></table><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>如下，一个典型的Rxjava的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observable</span><br><span class="line">                .create((ObservableOnSubscribe&lt;Integer&gt;) observableEmitter -&gt; &#123;</span><br><span class="line">                    observableEmitter.onNext(<span class="number">10</span>);</span><br><span class="line">                    observableEmitter.onComplete();</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(integer -&gt; <span class="keyword">new</span> RuntimeException().printStackTrace(),</span><br><span class="line">                        Throwable::printStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException</span><br><span class="line">at Main.lambdamain1(Main.java:11)</span><br><span class="line">at io.reactivex.internal.observers.LambdaObserver.onNext(LambdaObserver.java:63)</span><br><span class="line">at io.reactivex...ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:67)</span><br><span class="line">at Main.lambdamain0(Main.java:8)</span><br><span class="line">at io.reactivex.internal...ObservableCreate.subscribeActual(ObservableCreate.java:40)</span><br><span class="line">at io.reactivex.Observable.subscribe(Observable.java:12051)</span><br><span class="line">at io.reactivex.Observable.subscribe(Observable.java:12037)</span><br><span class="line">at io.reactivex.Observable.subscribe(Observable.java:11966)</span><br><span class="line">at Main.main(Main.java:11)</span><br></pre></td></tr></table></figure><p>可以看出来大概的调用流程是，通过<code>subscribe</code>绑定观察者之后，通过调用被观察者的<code>subscribeActual</code>接口，进而最终调用到观察者的<code>onNext</code>等方法。了解大致的流程，后面就可以分析了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">## Observable.java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        observer = RxJavaPlugins.onSubscribe(<span class="keyword">this</span>, observer);</span><br><span class="line">        subscribeActual(observer);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        Exceptions.throwIfFatal(e);</span><br><span class="line">        RxJavaPlugins.onError(e);</span><br><span class="line">        NullPointerException npe = <span class="keyword">new</span> NullPointerException(<span class="string">"Actually not, but can't throw other exceptions due to RS"</span>);</span><br><span class="line">        npe.initCause(e);</span><br><span class="line">        <span class="keyword">throw</span> npe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span></span>;</span><br><span class="line"></span><br><span class="line">##Observer.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//提供的Disposable接口，方便在随时时解除观察者的订阅，一般在subscribeActual中最开始初始化Disposable之后调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span></span>;</span><br><span class="line">    <span class="comment">//提供新的数据给到观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull T t)</span></span>;</span><br><span class="line"><span class="comment">//出现异常</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span></span>;</span><br><span class="line"><span class="comment">//数据分发完成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##Disposable.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当Observer不再关注Observable的改变时，可通过调用此接口解除关联。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><p>首先我们分析Rxjava中的通用被观察者<code>Observable</code>。<code>Observable</code>用来是生成被观察的序列，对象等的方式。<code>Observable</code>类中大约15000多行代码，大部分的函数都是静态函数和一些流式方法。在理解Observable之前我们需要能看懂一些常用的图，这些也是在很多介绍Rxjava都会遇到。如下，</p><p><img src="/.io//legend.png" alt="legend"></p><p>Observable提供了一系列的操作符，所有的操作参考下面表格</p><table><thead><tr><th align="center">操作符</th><th align="center">简要介绍</th></tr></thead><tbody><tr><td align="center">创建操作</td><td align="center">用于创建Observable的操作符，一般都是静态方法</td></tr><tr><td align="center">变换操作</td><td align="center">这些操作符可用于对Observable发射的数据进行变换</td></tr><tr><td align="center">过滤操作</td><td align="center">这些操作符用于从Observable发射的数据中进行选择</td></tr><tr><td align="center">组合操作</td><td align="center">组合操作符用于将多个Observable组合成一个单一的Observable</td></tr><tr><td align="center">错误处理</td><td align="center">这些操作符用于从错误通知中恢复</td></tr><tr><td align="center">辅助操作</td><td align="center">一组用于处理Observable的操作符</td></tr><tr><td align="center">条件和布尔操作</td><td align="center">这些操作符可用于单个或多个数据项，也可用于Observable</td></tr><tr><td align="center">算术和聚合操作</td><td align="center">这些操作符可用于整个数据序列</td></tr><tr><td align="center">连接操作</td><td align="center">一些有精确可控的订阅行为的特殊Observable</td></tr><tr><td align="center">转换操作</td><td align="center">将Observable转换为其它的对象或数据结构， 阻塞Observable等</td></tr></tbody></table><h5 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h5><p>创建操作常用的操作符有<code>Create</code>, <code>Defer</code>, <code>Empty/Never/Error</code>, <code>From</code>, <code>Interval</code>, <code>Just</code>, <code>Range</code>, <code>Repeat</code>, <code>Start</code>, <code>Timer</code>。我们一个个来看具体的实现。</p><blockquote><p> Rxjava并不是完整的按照观察者模式来实现的。在Rxjava中看起来更像是Observable订阅了Observer，与观察者模式反着来的，原因是为了使用流式编程作出的妥协，这样虽然逻辑上可能有点绕，但是对代码风格的统一却起着巨大作用。刚入门可能会因为这个被绕晕，了解了就知道这个是什么情况了。</p></blockquote><h6 id="Create"><a href="#Create" class="headerlink" title="# Create"></a># Create</h6><p>通过自定义ObservableOnSubscribe接口创建一个ObservableCreate对象，ObservableCreate中包含一个ObservableOnSubscribe的属性。从代码中我们可以看出创建了一个被观察者ObservableCreate，并且提供了subscribe方法来订阅观察者（Observable订阅了Observer），绑定了一个ObservableEmitter用来发送数据</p><p><img src="/.io//create.png" alt="create"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">create</span><span class="params">(ObservableOnSubscribe&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(source, <span class="string">"source is null"</span>);</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableCreate&lt;T&gt;(source));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableCreate.java</span><br><span class="line"><span class="comment">//具体观察者，继承Observable，实现其抽象方法subscribeActual</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableCreate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ObservableOnSubscribe&lt;T&gt; source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableCreate</span><span class="params">(ObservableOnSubscribe&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化Dispose并调用observer的onSubscribe方法，将Dispose传递到Onbserver中</span></span><br><span class="line">        CreateEmitter&lt;T&gt; parent = <span class="keyword">new</span> CreateEmitter&lt;T&gt;(observer);</span><br><span class="line">        observer.onSubscribe(parent);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用ObservableOnSubscribe的subscribe方法，这个接口是我们创建，作为create参数传入的，里面一般会调用传入的Emitter发射器的onNext，onError或者onComplete方法。此处Rxjava专门实现了一套对应的CreateEmitter类，即parent</span></span><br><span class="line">            source.subscribe(parent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(ex);</span><br><span class="line">            parent.onError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发射器，在Observer之上封装一层</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateEmitter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AtomicReference</span>&lt;<span class="title">Disposable</span>&gt; <span class="keyword">implements</span> <span class="title">ObservableEmitter</span>&lt;<span class="title">T</span>&gt;, <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer;</span><br><span class="line">    CreateEmitter(Observer&lt;? <span class="keyword">super</span> T&gt; observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observer = observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判空，Rxjava2不允许onNext传入参数为null</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onError(<span class="keyword">new</span> NullPointerException(...));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否已解除监听</span></span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            observer.onNext(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryOnError(t)) &#123;</span><br><span class="line">            RxJavaPlugins.onError(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryOnError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                observer.onError(t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                observer.onComplete();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableOnSubscribe.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObservableOnSubscribe</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;T&gt; emitter)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableEmitter.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObservableEmitter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Emitter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDisposable</span><span class="params">(Disposable d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCancellable</span><span class="params">(Cancellable c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ObservableEmitter&lt;T&gt; <span class="title">serialize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##Emitter.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Emitter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull T value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable error)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Defer"><a href="#Defer" class="headerlink" title="# Defer"></a># Defer</h6><p>介绍完Create我们来看另一个创建操作符Defer，Defer字面意思是推迟，即在运行subscribe才会去创建Observable，每个观察者被订阅的时候都重新创建被观察者，如图所示：<img src="/.io//defer.png" alt="defer"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">defer</span><span class="params">(Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(supplier, <span class="string">"supplier is null"</span>);</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableDefer&lt;T&gt;(supplier));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableDefer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableDefer</span><span class="params">(Callable&lt;? extends ObservableSource&lt;? extends T&gt;&gt; supplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.supplier = supplier;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</span><br><span class="line">        ObservableSource&lt;? extends T&gt; pub;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过Callable接口，实现真正执行的时候重新创建Observable</span></span><br><span class="line">            pub = ObjectHelper.requireNonNull(supplier.call(), <span class="string">"null ObservableSource supplied"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(t);</span><br><span class="line">            EmptyDisposable.error(t, s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pub.subscribe(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObservableSource</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Empty-Never-Error"><a href="#Empty-Never-Error" class="headerlink" title="# Empty/Never/Error"></a># Empty/Never/Error</h6><p>这几个使用场景比较单一，常用了作为测试用途。</p><p><code>empty</code>操作符不会发送任何数据，而是直接发送<code>onComplete</code>事件。</p><p><img src="/.io//empty.c.png" alt="empty.c"></p><p><code>never</code>什么都不会发送的操作符，也不会触发观察者任何的回调，通常用于“测试”用途。</p><p><img src="/.io//never.c.png" alt="never.c"></p><p><code>Error</code>操作符就是调用时候直接发送onError事件给观察者：</p><p><img src="/.io//error.png" alt="error"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly((Observable&lt;T&gt;) ObservableEmpty.INSTANCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableEmpty.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableEmpty</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">Object</span>&gt; <span class="keyword">implements</span> <span class="title">ScalarCallable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Observable&lt;Object&gt; INSTANCE = <span class="keyword">new</span> ObservableEmpty();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ObservableEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Object&gt; o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用了Observer的onComplete方法</span></span><br><span class="line">        <span class="comment">//EmptyDisposable.complete</span></span><br><span class="line">        <span class="comment">//o.onSubscribe(INSTANCE);</span></span><br><span class="line">        <span class="comment">//o.onComplete();</span></span><br><span class="line">        EmptyDisposable.complete(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// null scalar is interpreted as being empty</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">error</span><span class="params">(Callable&lt;? extends Throwable&gt; errorSupplier)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(errorSupplier, <span class="string">"errorSupplier is null"</span>);</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableError&lt;T&gt;(errorSupplier));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableError.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableError</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Callable&lt;? extends Throwable&gt; errorSupplier;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableError</span><span class="params">(Callable&lt;? extends Throwable&gt; errorSupplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errorSupplier = errorSupplier;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</span><br><span class="line">        Throwable error;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            error = ObjectHelper.requireNonNull(errorSupplier.call(), ...);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(t);</span><br><span class="line">            error = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用了Observer的onError方法</span></span><br><span class="line">        <span class="comment">//s.onSubscribe(INSTANCE);</span></span><br><span class="line">        <span class="comment">//s.onError(error);</span></span><br><span class="line">        EmptyDisposable.error(error, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">error</span><span class="params">(<span class="keyword">final</span> Throwable exception)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(exception, <span class="string">"e is null"</span>);</span><br><span class="line">    <span class="comment">//把exception封装成Callable</span></span><br><span class="line">    <span class="keyword">return</span> error(Functions.justCallable(exception));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">never</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly((Observable&lt;T&gt;) ObservableNever.INSTANCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableNever.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableNever</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Observable&lt;Object&gt; INSTANCE = <span class="keyword">new</span> ObservableNever();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ObservableNever</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Object&gt; o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只是创建了一个NEVER disposable的EmptyDisposable, 无其他操作</span></span><br><span class="line">        o.onSubscribe(EmptyDisposable.NEVER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="From"><a href="#From" class="headerlink" title="# From"></a># From</h6><p><code>from</code>是一系列from的集合，包括fromArray，fromCallable，fromFuture，fromIterable，fromPublisher，此处列举fromArray，fromCallable其他的实现大同小异。</p><p><img src="/.io//from.png" alt="from"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">fromArray</span><span class="params">(T... items)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(items, <span class="string">"items is null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (items.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (items.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> just(items[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableFromArray&lt;T&gt;(items));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableFromArray.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableFromArray</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> T[] array;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableFromArray</span><span class="params">(T[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</span><br><span class="line">        FromArrayDisposable&lt;T&gt; d = <span class="keyword">new</span> FromArrayDisposable&lt;T&gt;(s, array);</span><br><span class="line">        s.onSubscribe(d);</span><br><span class="line">        <span class="keyword">if</span> (d.fusionMode) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FromArrayDisposable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BasicQueueDisposable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; actual;</span><br><span class="line">    <span class="keyword">final</span> T[] array;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">boolean</span> fusionMode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> disposed;</span><br><span class="line"></span><br><span class="line">    FromArrayDisposable(Observer&lt;? <span class="keyword">super</span> T&gt; actual, T[] array) &#123;</span><br><span class="line">        <span class="keyword">this</span>.actual = actual;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T[] a = array;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; !isDisposed(); i++) &#123;</span><br><span class="line">            T value = a[i];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                actual.onError(<span class="keyword">new</span> NullPointerException(<span class="string">"The "</span> + i + <span class="string">"th element is null"</span>));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            actual.onNext(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            actual.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">fromCallable</span><span class="params">(Callable&lt;? extends T&gt; supplier)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(supplier, <span class="string">"supplier is null"</span>);</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableFromCallable&lt;T&gt;(supplier));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableFromCallable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Callable&lt;? extends T&gt; callable;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableFromCallable</span><span class="params">(Callable&lt;? extends T&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</span><br><span class="line">        DeferredScalarDisposable&lt;T&gt; d = <span class="keyword">new</span> DeferredScalarDisposable&lt;T&gt;(s);</span><br><span class="line">        s.onSubscribe(d);</span><br><span class="line">        <span class="keyword">if</span> (d.isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = ObjectHelper.requireNonNull(callable.call(), <span class="string">"Callable returned null"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Exceptions.throwIfFatal(e);</span><br><span class="line">            <span class="keyword">if</span> (!d.isDisposed()) &#123;</span><br><span class="line">                s.onError(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                RxJavaPlugins.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d.complete(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ObjectHelper.requireNonNull(callable.call(), <span class="string">"The callable returned a null value"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Interval"><a href="#Interval" class="headerlink" title="# Interval"></a># Interval</h6><p>每个固定的时间创建一个<code>Observable&lt;Integer&gt;</code></p><p><img src="/.io//interval.png" alt="interval"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;Long&gt; <span class="title">interval</span><span class="params">(<span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit, Scheduler scheduler)</span> </span>&#123;</span><br><span class="line"><span class="comment">//scheduler默认为COMPUTATION，关于scheduler的详细解释，见下文</span></span><br><span class="line">    ObjectHelper.requireNonNull(unit, <span class="string">"unit is null"</span>);</span><br><span class="line">    ObjectHelper.requireNonNull(scheduler, <span class="string">"scheduler is null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableInterval(Math.max(<span class="number">0L</span>, initialDelay), Math.max(<span class="number">0L</span>, period), unit, scheduler));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableInterval.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableInterval</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Scheduler scheduler;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> initialDelay;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> period;</span><br><span class="line">    <span class="keyword">final</span> TimeUnit unit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableInterval</span><span class="params">(<span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period, TimeUnit unit, Scheduler scheduler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initialDelay = initialDelay;</span><br><span class="line">        <span class="keyword">this</span>.period = period;</span><br><span class="line">        <span class="keyword">this</span>.unit = unit;</span><br><span class="line">        <span class="keyword">this</span>.scheduler = scheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Long&gt; s)</span> </span>&#123;</span><br><span class="line">        IntervalObserver is = <span class="keyword">new</span> IntervalObserver(s);</span><br><span class="line">        s.onSubscribe(is);</span><br><span class="line"></span><br><span class="line">        Scheduler sch = scheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Scheduler实现</span></span><br><span class="line">        <span class="keyword">if</span> (sch <span class="keyword">instanceof</span> TrampolineScheduler) &#123;</span><br><span class="line">            Worker worker = sch.createWorker();</span><br><span class="line">            is.setResource(worker);</span><br><span class="line">            worker.schedulePeriodically(is, initialDelay, period, unit);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Disposable d = sch.schedulePeriodicallyDirect(is, initialDelay, period, unit);</span><br><span class="line">            is.setResource(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">IntervalObserver</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AtomicReference</span>&lt;<span class="title">Disposable</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Disposable</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> Long&gt; actual;</span><br><span class="line">        <span class="keyword">long</span> count;</span><br><span class="line">        IntervalObserver(Observer&lt;? <span class="keyword">super</span> Long&gt; actual) &#123;</span><br><span class="line">            <span class="keyword">this</span>.actual = actual;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (get() != DisposableHelper.DISPOSED) &#123;</span><br><span class="line">                actual.onNext(count++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResource</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            DisposableHelper.setOnce(<span class="keyword">this</span>, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Just"><a href="#Just" class="headerlink" title="# Just"></a># Just</h6><p>对于只是发送几个数据来说，可以使用just操作符来简化, 如下，调用流程<code>onNext(&quot;test&quot;)</code>, <code>onNext(&quot;test1&quot;)</code>, <code>onNext(&quot;test2&quot;)</code>, 然后调用<code>onComplete()</code>, <code>Just</code>最多支持10个参数，除了一个参数的外，其他都是直接调用<code>fromArray</code>，一个参数的<code>Just</code>，具体实现与fromArray基本一致，在此不表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"test"</span>,<span class="string">"test2"</span>,<span class="string">"test3"</span>)</span><br><span class="line">        .subscribe(<span class="comment">//doSomething);</span></span><br></pre></td></tr></table></figure><p><img src="/.io//just.png" alt="just"></p><h6 id="Range"><a href="#Range" class="headerlink" title="# Range"></a># Range</h6><p>如果需要确定一个反射数据的范围可以采用range或者是rangeLong，后者的数据类型是long，可以使用的范围更加广，其他完全是一样的。第一个参数作为起始值，第二个参数作为数量。</p><p><img src="/.io//range.c.png" alt="range.c"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Observable&lt;Integer&gt; <span class="title">range</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &gt;= 0 required but it was "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> just(start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//超过最大整形允许范围直接抛异常</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">long</span>)start + (count - <span class="number">1</span>) &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Integer overflow"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableRange(start, count));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableRange.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableRange</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableRange</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = (<span class="keyword">long</span>)start + count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Integer&gt; o)</span> </span>&#123;</span><br><span class="line">        RangeDisposable parent = <span class="keyword">new</span> RangeDisposable(o, start, end);</span><br><span class="line">        o.onSubscribe(parent);</span><br><span class="line">        parent.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RangeDisposable</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">BasicIntQueueDisposable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> Integer&gt; actual;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> end;</span><br><span class="line">        <span class="keyword">long</span> index;</span><br><span class="line">        <span class="keyword">boolean</span> fused;</span><br><span class="line"></span><br><span class="line">        RangeDisposable(Observer&lt;? <span class="keyword">super</span> Integer&gt; actual, <span class="keyword">long</span> start, <span class="keyword">long</span> end) &#123;</span><br><span class="line">            <span class="keyword">this</span>.actual = actual;</span><br><span class="line">            <span class="keyword">this</span>.index = start;</span><br><span class="line">            <span class="keyword">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fused) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Observer&lt;? <span class="keyword">super</span> Integer&gt; actual = <span class="keyword">this</span>.actual;</span><br><span class="line">            <span class="keyword">long</span> e = end;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = index; i != e &amp;&amp; get() == <span class="number">0</span>; i++) &#123;</span><br><span class="line">                actual.onNext((<span class="keyword">int</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (get() == <span class="number">0</span>) &#123;</span><br><span class="line">                lazySet(<span class="number">1</span>);</span><br><span class="line">                actual.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于其他的创建操作符大致实现原理基本相同，不在此重复。</p><h5 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h5><p>对Observable发射的数据进行一系列变换，常用的操作符如<code>map</code>,<code>flatMap</code>,<code>flatMapIterable</code>,<code>concatMap</code>,<code>swicthMap</code>,<code>cast</code>,<code>scan</code>,<code>buffer</code>,<code>toList</code>,<code>groupBy</code>,<code>toMap</code>.</p><h6 id="map"><a href="#map" class="headerlink" title="# map"></a># map</h6><p>作为最长用的变换操作符我们首先来说一下<code>map</code>，可以把每一个元素转换成新的元素发射，接收一个<code>Function&lt;T,R&gt;</code>作为转换逻辑的操作。大致使用</p><p><img src="/.io//map.png" alt="map"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        .map(integer -&gt; <span class="number">10</span> * integer)</span><br><span class="line">        .subscribe(ele -&gt; Log.i(<span class="string">"tag"</span>, String.valueOf(ele)));</span><br></pre></td></tr></table></figure><p>注意我们此处是不会改变发射数据的数量，只改变元素的。接下来看代码具体的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">##Observable.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span> </span>&#123;</span><br><span class="line">    ObjectHelper.requireNonNull(mapper, <span class="string">"mapper is null"</span>);</span><br><span class="line">    <span class="comment">//传入当前的被观察者与mapper</span></span><br><span class="line">    <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableMap&lt;T, R&gt;(<span class="keyword">this</span>, mapper));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##ObservableMap.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableMap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractObservableWithUpstream</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; function;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObservableMap</span><span class="params">(ObservableSource&lt;T&gt; source, Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.function = function;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//与我们的之前分析的观察者与被观察之间的调用相同，其实如果我们看ObservableMap的具体继承，我们会发现其实ObservableMap也是一个被观察者，即map会产生一个新的被观察者对象，但是只有一个。发射的数据会创建多个。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> U&gt; t)</span> </span>&#123;</span><br><span class="line">        source.subscribe(<span class="keyword">new</span> MapObserver&lt;T, U&gt;(t, function));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapObserver</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; <span class="keyword">extends</span> <span class="title">BasicFuseableObserver</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper;</span><br><span class="line"></span><br><span class="line">        MapObserver(Observer&lt;? <span class="keyword">super</span> U&gt; actual, Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper) &#123;</span><br><span class="line">            <span class="keyword">super</span>(actual);</span><br><span class="line">            <span class="keyword">this</span>.mapper = mapper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sourceMode != NONE) &#123;</span><br><span class="line">                actual.onNext(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            U v;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//map操作mapper.apply(t)</span></span><br><span class="line">                v = ObjectHelper.requireNonNull(mapper.apply(t), <span class="string">"The mapper function returned a null value."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                fail(ex);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            actual.onNext(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="flatMap"><a href="#flatMap" class="headerlink" title="# flatMap"></a># flatMap</h6><p><code>Map</code>操作符是把每一个元素转换成一个新的元素，但是<code>flatMap</code>操作符是把每一个元素转换成新的被观察者，每个被观察者发射的元素将会合并成新的被观察者。例如下面的：</p><p><img src="/.io//flatMap.c.png" alt="flatMap.c"></p><p><code>flatMap</code>一个很有用的场景是，当Observable发射一系列拥有Observable成员或以其他方式可转换为Observable的数据时，<code>flatMap</code>会合并这些数据，以便它们交错。举个栗子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">                .flatMap((Function&lt;Integer, ObservableSource&lt;?&gt;&gt;) integer -&gt; Observable.just(<span class="string">"a"</span>, String.valueOf(integer)))</span><br><span class="line">                        .subscribe(System.out::print);</span><br><span class="line"></span><br><span class="line">输出结果是: a1a2a3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
